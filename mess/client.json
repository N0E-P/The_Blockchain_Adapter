{
    _events: [Object: null prototype] {
      shardDisconnect: [Function (anonymous)],
      interactionCreate: [Function (anonymous)]
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    options: {
      intents: IntentsBitField { bitfield: 1 },
      closeTimeout: 5000,
      waitGuildTimeout: 15000,
      shardCount: 1,
      makeCache: [Function (anonymous)],
      partials: [],
      failIfNotExists: true,
      presence: { status: 'online', user: [Object] },
      sweepers: { threads: [Object] },
      ws: {
        large_threshold: 50,
        compress: false,
        properties: [Object],
        version: 10,
        presence: [Object]
      },
      rest: {
        agent: [Getter],
        api: 'https://discord.com/api',
        authPrefix: 'Bot',
        cdn: 'https://cdn.discordapp.com',
        headers: {},
        invalidRequestWarningInterval: 0,
        globalRequestsPerSecond: 50,
        offset: 50,
        rejectOnRateLimit: null,
        retries: 3,
        timeout: 15000,
        userAgentAppendix: 'Node.js v16.16.0',
        version: '10',
        hashSweepInterval: 14400000,
        hashLifetime: 86400000,
        handlerSweepInterval: 3600000
      },
      jsonTransformer: [Function: toSnakeCase],
      shards: [ 0 ]
    },
    rest: REST {
      _events: [Object: null prototype] {
        newListener: [Function (anonymous)],
        removeListener: [Function (anonymous)]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      cdn: CDN { base: 'https://cdn.discordapp.com' },
      requestManager: RequestManager {
        _events: [Object: null prototype],
        _eventsCount: 4,
        _maxListeners: undefined,
        agent: [Agent],
        globalRemaining: 49,
        globalDelay: null,
        globalReset: 1671190265838,
        hashes: [Collection [Map]],
        handlers: [Collection [Map]],
        hashTimer: Timeout {
          _idleTimeout: 14400000,
          _idlePrev: [Timeout],
          _idleNext: [TimersList],
          _idleStart: 902,
          _onTimeout: [Function (anonymous)],
          _timerArgs: undefined,
          _repeat: 14400000,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 6,
          [Symbol(triggerId)]: 1
        },
        handlerTimer: Timeout {
          _idleTimeout: 3600000,
          _idlePrev: [Timeout],
          _idleNext: [TimersList],
          _idleStart: 902,
          _onTimeout: [Function (anonymous)],
          _timerArgs: undefined,
          _repeat: 3600000,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 7,
          [Symbol(triggerId)]: 1
        },
        options: [Object],
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false
    },
    ws: WebSocketManager {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      gateway: 'wss://gateway.discord.gg/',
      totalShards: 1,
      shards: Collection(1) [Map] { 0 => [WebSocketShard] },
      status: 0,
      destroyed: false,
      reconnecting: false,
      [Symbol(kCapture)]: false
    },
    actions: ActionsManager {
      client: [Circular *1],
      ApplicationCommandPermissionsUpdate: ApplicationCommandPermissionsUpdateAction { client: [Circular *1] },
      AutoModerationActionExecution: AutoModerationActionExecutionAction { client: [Circular *1] },
      AutoModerationRuleCreate: AutoModerationRuleCreateAction { client: [Circular *1] },
      AutoModerationRuleDelete: AutoModerationRuleDeleteAction { client: [Circular *1] },
      AutoModerationRuleUpdate: AutoModerationRuleUpdateAction { client: [Circular *1] },
      ChannelCreate: ChannelCreateAction { client: [Circular *1] },
      ChannelDelete: ChannelDeleteAction { client: [Circular *1] },
      ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
      GuildBanAdd: GuildBanAdd { client: [Circular *1] },
      GuildBanRemove: GuildBanRemove { client: [Circular *1] },
      GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
      GuildDelete: GuildDeleteAction { client: [Circular *1] },
      GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
      GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
      GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
      GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
      GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
      GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
      GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
      GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
      GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
      GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
      GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
      GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
      GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
      GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
      GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
      GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
      GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
      GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
      GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
      GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
      GuildUpdate: GuildUpdateAction { client: [Circular *1] },
      InteractionCreate: InteractionCreateAction { client: [Circular *1] },
      InviteCreate: InviteCreateAction { client: [Circular *1] },
      InviteDelete: InviteDeleteAction { client: [Circular *1] },
      MessageCreate: MessageCreateAction { client: [Circular *1] },
      MessageDelete: MessageDeleteAction { client: [Circular *1] },
      MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
      MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
      MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
      MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
      MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
      MessageUpdate: MessageUpdateAction { client: [Circular *1] },
      PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
      StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
      StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
      StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
      ThreadCreate: ThreadCreateAction { client: [Circular *1] },
      ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
      ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
      ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
      ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
      TypingStart: TypingStart { client: [Circular *1] },
      UserUpdate: UserUpdateAction { client: [Circular *1] },
      VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
      WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
    },
    voice: ClientVoiceManager { adapters: Map(0) {} },
    shard: null,
    users: UserManager {},
    guilds: GuildManager {},
    channels: ChannelManager {},
    sweepers: Sweepers {
      options: { threads: [Object] },
      intervals: {
        autoModerationRules: null,
        applicationCommands: null,
        bans: null,
        emojis: null,
        invites: null,
        guildMembers: null,
        messages: null,
        presences: null,
        reactions: null,
        stageInstances: null,
        stickers: null,
        threadMembers: null,
        threads: Timeout {
          _idleTimeout: 3600000,
          _idlePrev: [Timeout],
          _idleNext: [Timeout],
          _idleStart: 990,
          _onTimeout: [Function (anonymous)],
          _timerArgs: undefined,
          _repeat: 3600000,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 8,
          [Symbol(triggerId)]: 1
        },
        users: null,
        voiceStates: null
      }
    },
    presence: ClientPresence {
      userId: null,
      guild: null,
      status: 'online',
      activities: [],
      clientStatus: null
    },
    user: ClientUser {
      id: '1052168712062513155',
      bot: true,
      system: false,
      flags: UserFlagsBitField { bitfield: 0 },
      username: 'The Blockchain Adapter',
      discriminator: '9640',
      avatar: 'd85eff5678d8b22ecffbd0dbe3929dad',
      banner: undefined,
      accentColor: undefined,
      verified: true,
      mfaEnabled: false
    },
    application: ClientApplication {
      id: '1052168712062513155',
      name: null,
      description: null,
      icon: null,
      tags: [],
      installParams: null,
      customInstallURL: null,
      flags: ApplicationFlagsBitField { bitfield: 8953856 },
      cover: null,
      rpcOrigins: [],
      botRequireCodeGrant: null,
      botPublic: null,
      owner: null,
      commands: ApplicationCommandManager {
        permissions: [ApplicationCommandPermissionsManager]
      }
    },
    readyTimestamp: 1671190266028,
    commands: Collection(2) [Map] {
      'balance' => { data: [SlashCommandBuilder], execute: [AsyncFunction: execute] },
      'view' => {
        data: [SlashCommandBuilder],
        autocomplete: [AsyncFunction: autocomplete],
        execute: [AsyncFunction: execute]
      }
    },
    modals: Collection(1) [Map] {
      'balance-reply' => { data: [Object], execute: [AsyncFunction: execute] }
    },
    commandArray: [
      {
        options: [],
        name: 'balance',
        name_localizations: undefined,
        description: 'Get the ETH Balance of a User',
        description_localizations: undefined,
        default_permission: undefined,
        default_member_permissions: undefined,
        dm_permission: undefined
      },
      {
        options: [Array],
        name: 'view',
        name_localizations: undefined,
        description: 'Call a view function',
        description_localizations: undefined,
        default_permission: undefined,
        default_member_permissions: undefined,
        dm_permission: undefined
      }
    ],
    handleCommands: [AsyncFunction (anonymous)],
    handleComponents: [AsyncFunction (anonymous)],
    handleEvents: [AsyncFunction (anonymous)],
    [Symbol(kCapture)]: true
  }